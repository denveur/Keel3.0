<method>

	<name>Genetic Programming-based learning of COmpact and ACcurate fuzzy rule-based classification systems for High-dimensional problems (GP-COACH)</name>

	<reference>  
<ref>F.J. Berlanga, A.J. Rivera, M.J. del Jesus, F. Herrera, GP-COACH: Genetic Programming based learning of COmpact and ACcurate fuzzy rule based classification systems for high dimensional problems. Information Sciences 180:8 (2010) 1183-1200</ref> 
	</reference>

	<generalDescription>  

		<type>Evolutionary Fuzzy Rule Based Classification System</type>

		<objective>To obtain a Fuzzy Rule Base that better suits the training data</objective>

		<howWork>This process includes a GCCL approach to build a Fuzzy Rule Base for a classification problem
			by the means of a Genetic Programming procedure. Firstly a population of rules is randomly generated
			according to the DNF grammar constraints. Then, a genetic optimization procedure is started focusing
			on two evaluation measures: local_fitness_function to evaluate each rule and global_fitness_function
			to evaluate the whole population. The genetic programming procedure includes a tournament selection, 
			crossover, mutation, insertion and dropping condition operations. The new rules generated do not 
			replace rules in the current generation, they are added to the population thus making the population 
			size variable. To promote diversity it includes a token competition procedure. To increase the 
			diversity it learns two type of rules: primary rules, which are strong and general rules and secondary
			rules, which are weaker and more specific rules. Finally, the best population found is returned as
			solution.
		</howWork>

		<parameterSpec>  
			<param>Number of Labels: the number of possible fuzzy values for each variable.</param>
			<param>T-norm/T-conorm for the Computation of the Compatibility Degree: Minimum T-norm/Maximum T-conorm or Product T-norm/Probabilistic Sum T-conorm </param>
			<param>Rule Weight: Type of rule weight for the fuzzy rules </param>
			<param>Fuzzy Reasoning Method: For the mechanism of inference </param>
			<param>Number of Generations: Number of generations applied to the GCCL process</param>
			<param>Initial Number of Fuzzy Rules: Initial Number of rules in the Rule Base (initial size of the population)</param>
			<param>Alpha Raw Fitness: Alpha parameter used in the computation of the raw_fitness function for each rule</param>
			<param>Crossover probability: Probality to cross any individual with another individual in the population</param>
			<param>Mutation probability: Probality to mutate any individual variable's label in the population</param>
			<param>Insertion probability: Probality to insert any variable to an individual in the population</param>
			<param>Dropping Condition probability: Probality to delete any variable from an individual in the population</param>
			<param>Tournament Selection Size: Size of the tournament selection procedure used to select and individual to apply a genetic operator in order to create a new rule</param>
			<param>Global Fitness Weight 1: w1 parameter used in the computation of the global_fitness function for the whole population</param>
			<param>Global Fitness Weight 2: w2 parameter used in the computation of the global_fitness function for the whole population</param>
			<param>Global Fitness Weight 3: w3 parameter used in the computation of the global_fitness function for the whole population</param>
			<param>Global Fitness Weight 4: w4 parameter used in the computation of the global_fitness function for the whole population</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>Yes</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: GP_COACH-C
Dataset: iris
Training set: iris-10-1tra.dat
Test set: iris-10-1tst.dat
Test Show results: Vis-Clas-Check
Parameters: default values

After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTGP_COACH-C folder the classification results for the training and test sets:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=1.0 N/C=0.0 
...
Global Classification Error + N/C:
0.02 
stddev Global Classification Error + N/C:
0.030550504633038933 
Correctly classified:
0.98 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.9777777777777777 N/C=0.0 
...
Global Classification Error + N/C:
0.021481481481481483 
stddev Global Classification Error + N/C:
0.003989010968247764 
Correctly classified:
0.9785185185185186 
Global N/C:
0.0 

We can see also the Data Base and Rule Base generated in the files "result0s0e0.txt" and "result0s0e1.txt" 
respectively in the folder experiment/results/GP_COACH-C.iris/:

@Using Triangular Membership Functions as antecedent fuzzy sets
@Number of Labels per variable: 5

sepalLength:
 L_1: (3.3999999999999995,4.3,5.2)
 L_2: (4.3,5.2,6.1)
 L_3: (5.2,6.1,7.0)
 L_4: (6.1,7.0,7.9)
 L_5: (7.0,7.9,8.8)

sepalWidth:
 L_1: (1.4,2.0,2.6)
 L_2: (2.0,2.6,3.2)
 L_3: (2.6,3.2,3.8000000000000003)
 L_4: (3.2,3.8000000000000003,4.4)
 L_5: (3.8000000000000003,4.4,5.0)

petalLength:
 L_1: (-0.4750000000000001,1.0,2.475)
 L_2: (1.0,2.475,3.95)
 L_3: (2.475,3.95,5.425000000000001)
 L_4: (3.95,5.425000000000001,6.9)
 L_5: (5.425000000000001,6.9,8.375)

petalWidth:
 L_1: (-0.5,0.1,0.7)
 L_2: (0.1,0.7,1.3)
 L_3: (0.7,1.3,1.9)
 L_4: (1.3,1.9,2.5)
 L_5: (1.9,2.5,3.1)


@Number of rules: 3

1: IF petalWidth IS (L_0 OR L_1) THEN Iris-setosa with Rule Weight: 0.8666666666666668
2: IF petalWidth IS (L_3 OR L_4) THEN Iris-virginica with Rule Weight: 0.8471074380165293
3: IF petalLength IS L_2 THEN Iris-versicolor with Rule Weight: 0.8679867986798672

</example>

</method>
