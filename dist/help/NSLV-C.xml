<method>

	<name>NSLV: New SLaVe</name>

	<reference>  

<ref>Gonzalez, A., Perez, R., “Improving the genetic algorithm of SLAVE”, Mathware & Soft Computing, 16, 59–70 (2009).</ref>
<ref>Garcia, D., Gonzalez, A., Perez, R., "Overview of the SLAVE learning algorithm: A review of its evolution and prospects", International Journal of Computational Intelligence Systems, 7 (6), 1194-1221 (2014).</ref>

	</reference>

	<generalDescription>  

		<type>Evolutionary Fuzzy Rule Based Classification System.</type>

		<objective>To obtain a fuzzy classifier as a set of fuzzy rules representing the best way possible the training data.</objective>

		<howWork> NSLV is a fuzzy rule learning algorithm based on the use of a sequential covering strategy.
		It iteratively extracts a single rule which is added to the rule set. The selection of the best rule
		in each iteration is carried out by means of a GA. The algorithm returns the final rule base obtained
		at the end of the learning process. NSLV is an improved version of SLAVE2 which avoids the bias
		generated by the selection of the class in the iterative process. Definitely, NSLV is the natural
		evolution of the algorithms SLAVE and SLAVE2 described in "Overview of the SLAVE learning algorithm:
		A review of its evolution and prospects" cited above.

		</howWork>

		<parameterSpec>  
		    <param>Population Size</param>
		    <param>Number of Iterations Allowed without Change</param>
		    <param>Binary Mutation Probability</param>
		    <param>Integer Mutation Probability</param>
		    <param>Real Mutation Probability</param>
		    <param>Crossover Probability</param>
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>Yes</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Classification
        Method: Clas-Fuzzy-NSLV
		Dataset: iris
		Training set: iris-10-1tra.dat
		Test set: iris-10-1tst.dat
		Test Show results: Vis-Clas-Check
        Parameters: default values

		After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTNSLV folder the classification results for the test set:

TEST RESULTS
============
Classifier= iris 
Fold 0 : CORRECT=0.8666666666666667 N/C=0.0 
Fold 1 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 2 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 3 : CORRECT=1.0 N/C=0.0 
Fold 4 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 5 : CORRECT=1.0 N/C=0.0 
Fold 6 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 7 : CORRECT=1.0 N/C=0.0 
Fold 8 : CORRECT=1.0 N/C=0.0 
Fold 9 : CORRECT=1.0 N/C=0.0 
Global Classification Error + N/C:
0.039999999999999994 
stddev Global Classification Error + N/C:
0.04422166387140534 
Correctly classified:
0.96 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= iris 
Summary of data, Classifiers: iris 
Fold 0 : CORRECT=0.9777777777777777 N/C=0.0 
Fold 1 : CORRECT=0.9851851851851852 N/C=0.0 
Fold 2 : CORRECT=0.962962962962963 N/C=0.0 
Fold 3 : CORRECT=0.9777777777777777 N/C=0.0 
Fold 4 : CORRECT=0.962962962962963 N/C=0.0 
Fold 5 : CORRECT=0.9555555555555556 N/C=0.0 
Fold 6 : CORRECT=0.962962962962963 N/C=0.0 
Fold 7 : CORRECT=0.9555555555555556 N/C=0.0 
Fold 8 : CORRECT=0.9703703703703703 N/C=0.0 
Fold 9 : CORRECT=0.9555555555555556 N/C=0.0 
Global Classification Error + N/C:
0.03333333333333333 
stddev Global Classification Error + N/C:
0.010075163339804037 
Correctly classified:
0.9666666666666667 
Global N/C:
0.0 


		We can see too the output and target classes for each case of the train set (result0s0.tra) in experiment/results/NSLV.iris/:

@relation iris
@attribute sepalLength real [4.3, 7.9]
@attribute sepalWidth real [2.0, 4.4]
@attribute petalLength real [1.0, 6.9]
@attribute petalWidth real [0.1, 2.5]
@attribute class {Iris-setosa, Iris-versicolor, Iris-virginica}
@inputs sepalLength, sepalWidth, petalLength, petalWidth
@outputs class
@data
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
...


		And the test results (result0s0.tst) in experiment/results/NSLV.iris/:

@relation iris
@attribute sepalLength real [4.3, 7.9]
@attribute sepalWidth real [2.0, 4.4]
@attribute petalLength real [1.0, 6.9]
@attribute petalWidth real [0.1, 2.5]
@attribute class {Iris-setosa, Iris-versicolor, Iris-virginica}
@inputs sepalLength, sepalWidth, petalLength, petalWidth
@outputs class
@data
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-setosa
Iris-setosa Iris-virginica
Iris-versicolor Iris-versicolor
Iris-versicolor Iris-versicolor
Iris-versicolor Iris-versicolor
Iris-versicolor Iris-versicolor
Iris-versicolor Iris-versicolor
Iris-virginica Iris-virginica
Iris-virginica Iris-virginica
Iris-virginica Iris-versicolor
Iris-virginica Iris-virginica
Iris-virginica Iris-virginica


        The file "experiment/results/NSLV.iris/result0s0e0.txt" contains the following information:
		 
Experiment: ../datasets/iris/iris-10-1tra.dat
===================================================


===============
 Run 
===============
Accuracy on training: 0.0
Number of examples: 135
Class 0: 45
Class 1: 45
Class 2: 45
Successes: 45.0
Errors:  0.0
Not classified: 90.0
	Rule 0: 45 / 0
Successes: 45.0
Errors:  0.0
Not classified: 90.0
	Rule 0: 45 / 0
Accuracy on training: 0.3333333333333333
Number of examples: 90
Class 0: 0
Class 1: 45
Class 2: 45
Successes: 90.0
Errors:  6.0
Not classified: 39.0
	Rule 0: 45 / 0
	Rule 1: 45 / 6
Successes: 90.0
Errors:  6.0
Not classified: 39.0
	Rule 0: 45 / 0
	Rule 1: 45 / 6
Accuracy on training: 0.6666666666666666
Number of examples: 45
Class 0: 0
Class 1: 0
Class 2: 45
Successes: 132.0
Errors:  3.0
Not classified: 0.0
	Rule 0: 45 / 0
	Rule 1: 42 / 0
	Rule 2: 45 / 3
Successes: 132.0
Errors:  3.0
Not classified: 0.0
	Rule 0: 45 / 0
	Rule 1: 42 / 0
	Rule 2: 45 / 3
Accuracy on training: 0.9777777777777777
Number of examples: 3
Class 0: 0
Class 1: 3
Class 2: 0
Successes: 132.0
Errors:  3.0
Not classified: 0.0
	Rule 0: 45 / 0
	Rule 1: 42 / 0
	Rule 2: 44 / 3
	Rule 3: 1 / 0
Successes: 132.0
Errors:  3.0
Not classified: 0.0
	Rule 0: 45 / 0
	Rule 1: 43 / 1
	Rule 2: 44 / 2
Successes: 132.0
Errors:  3.0
Not classified: 0.0
	Rule 0: 45 / 0
	Rule 1: 43 / 1
	Rule 2: 44 / 2
Successes: 13.0
Errors:  2.0
Not classified: 0.0
	Rule 0: 4 / 0
	Rule 1: 5 / 1
	Rule 2: 4 / 1
----------------------------------------------------
Accuracy on training: 0.9777777777777777
Accuracy on test: 0.8666666666666667
Number of rules: 3.0
Variables per rule: 1.0
Variables used: 0.5
Time: 0.322
Iterations: 2222
Conditions: 3
----------------------------------------------------
------------------- RULES -------------------------
----------------------------------------------------
IF
	petalWidth = { VeryLow}
THEN class IS Iris-setosa   W 1.0

IF
	petalLength = { Medium}
	petalWidth = { Medium}
THEN class IS Iris-versicolor   W 0.9638489157965948

IF
THEN class IS Iris-virginica   W 0.3382352941176471

	Accuracy on training set is: 0.9777777777777777
	Accuracy on test set is: 0.8666666666666667
	Number of rules is: 3.0
	Variables per rule is: 1.0
	Variables used is: 0.5
	Time is: 0.322
	Iterations is: 2222
	Conditions is: 3


</example>

</method>
