package keel.Algorithms.Neural_Networks.NNEP_Common.data;

import java.util.ArrayList;

import java.util.List;

import net.sf.jclec.util.intset.Closure;
import net.sf.jclec.util.intset.Interval;

import java.util.Hashtable;
//import com.sun.org.apache.xalan.internal.xsltc.runtime.Hashtable;

/**
 * <p>
 * @author Written by Amelia Zafra, Sebastian Ventura (University of Cordoba) 17/07/2007
 * @version 0.1
 * @since JDK1.5
 * </p>
 */

public class CategoricalAttribute extends AbstractAttribute {
	
	/**
	 * <p>
	 * Categorical attributes
	 * </p>
	 */
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 1L;

	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------------- Properties 
	/////////////////////////////////////////////////////////////////
	
	/** Number of Categories */
	
	protected int numCategories;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables 
	/////////////////////////////////////////////////////////////////
	
	/** Association between real and double values */
	
	@SuppressWarnings("unchecked")
	protected Hashtable htRealValue = new Hashtable();
	
	/** Association between double and real values */
		
	@SuppressWarnings("unchecked")
	protected Hashtable htDoubleValue = new Hashtable();
	
	/** Categories list (external values) */
		
	protected List<String> categories = new ArrayList<String>();
	
	/** Categories list (internal values) */
	
	protected List<Double> doubleValues = new ArrayList<Double>();
		
	/** The last value assigned */
	
	protected double lastValue;
	
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Constructor
	/////////////////////////////////////////////////////////////////
	
	
	/**
	 * <p>
	 * Empty constructor
	 * </p>
	 */	
	public CategoricalAttribute(){
		super();
		
		lastValue = 0;
		numCategories = 0;
	}
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------- Setting and getting properties
	/////////////////////////////////////////////////////////////////

	/**
	 * <p>
	 * Access to Number of categories
	 * </p>
	 * @return number of categories
	 */	
	public int  getNumberCategories() 
	{
		return numCategories;
	}

	/**
	 * <p>
	 * Set Number of categories
	 * </p>
	 * @param numCategories New Number of Categories
	 */	
	public void setNumberCategories(int numCategories) 
	{
		this.numCategories = numCategories;
	}
	
	
	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * <p>
	 * Adds a new value
	 * </p>
	 * @param newValye New value to be added
	 */
	@SuppressWarnings("unchecked")
	public void addValue(Object newValue){
		
		//Check if the newValue already has been considered
		if(! categories.contains(newValue)) {
			
			lastValue ++;
			numCategories ++;
			categories.add((String) newValue);

			//Add the association between the objects
			htRealValue.put(newValue, new Double(lastValue));
			htDoubleValue.put(new Double(lastValue), newValue);
		}
	}
	
	
	/////////////////////////////////////////////////////////////////
	// -------------------------- Overwriting AbstractAttribute methods
	/////////////////////////////////////////////////////////////////

	/**
	 * <p>
	 * Access to the attribute type
	 * </p>
	 * @return attribute name
	 */
	@Override
	public AttributeType getType() {
		return AttributeType.Categorical;
	}

	/**
	 * <p>
	 * Check if this internal attribute value is valid
	 * </p>
	 * @return true|false
	 */	
	@Override
	public boolean isValid(double internalValue) {
		if( htDoubleValue.containsKey(internalValue))
			 return true;
				
		return false;
	}

	/**
	 * <p>
	 * Check if this external attribute value is valid
	 * </p>
	 * @param externalValue Value to check
	 * @return true|false
	 */	
	@Override
	public boolean isValid(Object externalValue) {
		 if( htRealValue.containsKey(externalValue))
			 return true;
				
		return false;
	}

	/**
	 * <p>
	 * Parse an  external value to obtain  the internal value of the 
	 * Attribute
	 * </p>
	 * @return The external value of the attribute
	 */
	@Override
	public double parse(String externalValue) {
		if( htRealValue.containsKey(externalValue))
			 return ((Double) htRealValue.get(externalValue)).doubleValue();
		 
		 return -1;
	}

	/**
	 * <p>
	 * Show an String which represents a given real value
	 * </p>
	 * @return The real value of the attribute
	 */	
	@Override
	public String show(double internalValue) {
		 if( htDoubleValue.containsKey(new Double(internalValue)))
			 return (String) htDoubleValue.get(new Double(internalValue));
		
		 return null;
	}
	
	/**
	 * <p>
	 * Return an interval with the allowed values
	 * </p>
	 * @return Interval Interval that contains the allowed values
	 */	
	public Interval intervalValues() {
		Interval interval = new Interval(1, numCategories, Closure.ClosedClosed);

		return interval;
	}

}
